-- In the global file of your game, simply add this line
-- #include main
-- Then, in Atom package settings, go to the TTS package and define the path
-- to this folder. Since this main file already includes the others no further
-- operation is required for scripts. The XML needs to be copied manually
-- however.

#include scripts/data/data_settings
#include scripts/data/data_tables
#include scripts/data/data_terrain
#include scripts/data/data_troops
#include scripts/data/data_armies_plain
#include scripts/utilities_lua
#include scripts/utilities
#include scripts/logic_terrain
#include scripts/logic_gizmos
#include scripts/logic_spawn_army
#include scripts/logic_dead
#include scripts/logic_dice
#include scripts/logic
#include scripts/uievents

-- DBX Library
DBX = require('../dbx_tts/main')
Logger = DBX.Logger:Create()
History = DBX.History

Settings = DBX.Settings
Settings.units = 1*100
Settings.unit_str = 'paces'
Settings.format_precision = '%.1f'

Utils = DBX.Utils
BasePicker = DBX.BasePicker:Create()


function onload()
    Logger.info('----------------------------------------------')
    Logger.info('                       DBN 2.1 v0.0.4 ')
    Logger.info('----------------------------------------------\n\nCheck the Notebook for instructions.')

    Wait.time(main_loop, Settings.seconds_main_loop, -1)

    Logger.enabled = false
    make_scenery_non_interactable()
    reset_state()
    spawn_all_dice()
    spawn_dead_zones()

    Wait.time(function ()
        Logger.enabled = true
    end, 1, 0)
end


function make_scenery_non_interactable()
    -- Main table
    getObjectFromGUID('4adbe6').interactable = false

    -- Chairs
    getObjectFromGUID('1d5cd6').interactable = false
    getObjectFromGUID('670e7b').interactable = false
end

function update()
    BasePicker:check_picked_base()
end

function print_help()
    Logger.info('Write commands in the chat by writting !command.')
    Logger.info('A extended description can be found on the Notebook.')
    Logger.info('Available commands:')
    Logger.info('!dbn_help: Print this help')
    Logger.info('!dbn_print_state: Prints the current global vars of bases and table')
    Logger.info('!dbn_reset: Recalculates the bases and tables using heuristics on the existing objects')
end

function onChat(message, player)
    if message == '!dbn_help' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        print_help()
        return false
    end

    if message == '!dbn_reset' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        Logger.important('Resetting the state of the board, check the chat')
        reset_state()
        return false
    end

    if message == '!dbn_kill_lights' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        Logger.important('Killing the lights')

        local lights = {
            main = '06f591',
            key = '607c46',
            back1 = '8b3843',
            back2 = '78eb52',
            fill = '037fab'
        }

        for name, id in pairs(lights) do
            local obj = getObjectFromGUID(id)
            if not obj then
                Logger.info('Couldnt get ' .. name)
            end

            if not destroyObject(obj) then
                Logger.info('Couldnt kill light' .. name)
            end
        end

        return false
    end

    if message == '!dbn_print_state' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        print_state()
        return false
    end

    if message == '!dbn_debug' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        if Logger.debug_enabled then
            Logger.info('Disabling debug mode')
            Logger.debug_enabled = false
        else
            Logger.info('Enabling debug mode, will take effect in three seconds. Note, this will cause decreased performance.')
            Wait.time(function()
                Logger.debug_enabled = true
                Logger.info('Debug mode ON')
            end, 3)
        end
        return false
    end

    if message == '!dbn_3dterrain' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        g_use_3d_terrain = true
        Logger.info('3D Terrain enabled, when doing a fix&lock on the table 3D objects will load.')
        return false
    end

    if message == '!dbn_regen_dice' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        spawn_all_dice()
        return false
    end

    if message == '!dbn_random_army' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        local _,book = random_kv(armies)
        local army_name, army = random_kv(book)

        Logger.important('Army selected: ' .. army_name .. '')
        Logger.info('List: ' .. army['data']['list'])
        return false
    end

    if message == '!dbn_terrain' then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        local counter = 0
        for k,v in pairs(g_terrain) do
            Logger.info('Spawning ' .. k)
            local variant_counter = 0
            for _,variant in ipairs(v['variants']) do
                spawn_terrain_obj(v, { x = 16 + counter, y = 0, z = -10 + variant_counter}, variant['size'], function(obj)
                    -- Unity calculates the bounds on a separate thread and may take a while, even if the
                    -- obj has loaded already
                    Wait.time(function()
                        local bounds = obj.getBoundsNormalized()
                        local short_name = v['description'] .. ' ' .. variant['name']
                        Logger.debug('Spawned ' .. short_name .. ' Size: ' .. vec_to_str(bounds.size))
                        obj.setName('terrain ' .. short_name .. ' ' .. vec_to_xz_mm(bounds.size))
                    end, 1)
                end)
                variant_counter = variant_counter + 10
            end
            counter = counter + 10
        end
        return false
    end

    if str_starts_with(message, '!dba') then
        Logger.info(player.get_steam_name() .. ': ' .. message)
        Logger.error('Command not recognized. Please, use !dbn_help')
    end
    return true
end
